<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="79" passed="78">
  <reporter-output>
    <line>
      <![CDATA[Running test for CustomData{employeeName='Simon Stewart', country=UNITED_STATES}]]>
    </line>
    <line>
      <![CDATA[Running test for CustomData{employeeName='Jim Evans', country=UNITED_STATES}]]>
    </line>
    <line>
      <![CDATA[Running test for CustomData{employeeName='Francois Reynaud', country=UNITED_STATES}]]>
    </line>
    <line>
      <![CDATA[Running test for SimpleData{employeeId=1, employeeName='Simon Stewart'}]]>
    </line>
    <line>
      <![CDATA[Running test for SimpleData{employeeId=2, employeeName='Jim Evans'}]]>
    </line>
    <line>
      <![CDATA[Running test for SimpleData{employeeId=3, employeeName='Francois Reynaud'}]]>
    </line>
    <line>
      <![CDATA[Running test for SimpleData{employeeId=1, employeeName='Simon Stewart'}]]>
    </line>
    <line>
      <![CDATA[Running test for SimpleData{employeeId=2, employeeName='Jim Evans'}]]>
    </line>
    <line>
      <![CDATA[Soft Assert [Ensuring that falsy values are always falsy] failed in simpleTestMethod()
java.lang.AssertionError: Ensuring that falsy values are always falsy expected [false] but found [true]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertFalse(Assert.java:63)
	at org.testng.asserts.Assertion$3.doAssert(Assertion.java:130)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
	at org.testng.asserts.Assertion.assertFalse(Assertion.java:127)
	at com.paypal.selion.platform.asserts.SeLionAsserts.verifyFalse(SeLionAsserts.java:224)
	at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:36)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:73)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:94)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)
]]>
    </line>
    <line>
      <![CDATA[Soft Assert [Ensuring that the author of this test was Krishnan] failed in simpleTestMethod()
java.lang.AssertionError: Ensuring that the author of this test was Krishnan expected [Krishnan] but found [null]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.asserts.Assertion$8.doAssert(Assertion.java:175)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
	at org.testng.asserts.Assertion.assertEquals(Assertion.java:172)
	at com.paypal.selion.platform.asserts.SeLionAsserts.verifyEquals(SeLionAsserts.java:258)
	at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:73)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:94)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)
]]>
    </line>
    <line>
      <![CDATA[Soft Assert [Ensuring that Null values stay that way] failed in simpleTestMethod()
java.lang.AssertionError: Ensuring that Null values stay that way expected [null] but found [Rambo]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotSame(Assert.java:492)
	at org.testng.Assert.assertNull(Assert.java:428)
	at org.testng.asserts.Assertion$31.doAssert(Assertion.java:383)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
	at org.testng.asserts.Assertion.assertNull(Assertion.java:380)
	at com.paypal.selion.platform.asserts.SeLionAsserts.verifyNull(SeLionAsserts.java:338)
	at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:73)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:94)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)
]]>
    </line>
  </reporter-output>
  <suite name="SeLion Sample Tests" duration-ms="1664" started-at="2016-04-29T06:35:17Z" finished-at="2016-04-29T06:35:19Z">
    <groups>
    </groups>
    <test name="DemoNonUITests" duration-ms="1664" started-at="2016-04-29T06:35:17Z" finished-at="2016-04-29T06:35:19Z">
      <class name="com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest">
        <test-method status="PASS" signature="initializeTestDataForComparison()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="initializeTestDataForComparison" is-config="true" duration-ms="7" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeTestDataForComparison -->
        <test-method status="PASS" signature="howToGetAllDataAsHashtable()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetAllDataAsHashtable" duration-ms="135" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetAllDataAsHashtable -->
        <test-method status="PASS" signature="howToGetAllDataFromDocuments()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetAllDataFromDocuments" duration-ms="33" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetAllDataFromDocuments -->
        <test-method status="PASS" signature="howToGetAllDataFromList()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetAllDataFromList" duration-ms="26" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetAllDataFromList -->
        <test-method status="PASS" signature="howToGetAllDataFromMap()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetAllDataFromMap" duration-ms="25" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetAllDataFromMap -->
        <test-method status="PASS" signature="howToGetAllDataFromStringList()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetAllDataFromStringList" duration-ms="14" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetAllDataFromStringList -->
        <test-method status="PASS" signature="howToGetAllDataFromTaggedList()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetAllDataFromTaggedList" duration-ms="24" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetAllDataFromTaggedList -->
        <test-method status="PASS" signature="howToGetDataByARangeOfIndexes()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetDataByARangeOfIndexes" duration-ms="28" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetDataByARangeOfIndexes -->
        <test-method status="PASS" signature="howToGetDataByASingleIndex()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetDataByASingleIndex" duration-ms="16" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetDataByASingleIndex -->
        <test-method status="PASS" signature="howToGetDataByASingleKey()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetDataByASingleKey" duration-ms="14" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetDataByASingleKey -->
        <test-method status="PASS" signature="howToGetDataByIndividualAndRangeOfIndexes()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetDataByIndividualAndRangeOfIndexes" duration-ms="24" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetDataByIndividualAndRangeOfIndexes -->
        <test-method status="PASS" signature="howToGetDataByMultipleIndexes()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetDataByMultipleIndexes" duration-ms="25" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetDataByMultipleIndexes -->
        <test-method status="PASS" signature="howToGetDataByMultipleKeys()[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="howToGetDataByMultipleKeys" duration-ms="19" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- howToGetDataByMultipleKeys -->
        <test-method status="PASS" signature="testDataProviderGetAssociativeArray(java.util.Map)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetAssociativeArray" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getAssociativeArray" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{name=1, email=user1@paypal.com, txId=10686626}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetAssociativeArray -->
        <test-method status="PASS" signature="testDataProviderGetAssociativeArray(java.util.Map)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetAssociativeArray" duration-ms="5" started-at="2016-04-29T14:35:18Z" data-provider="getAssociativeArray" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{name=2, email=user2@paypal.com, txId=10686627}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetAssociativeArray -->
        <test-method status="PASS" signature="testDataProviderGetAssociativeArrayOfArrays(java.util.Map)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetAssociativeArrayOfArrays" duration-ms="5" started-at="2016-04-29T14:35:18Z" data-provider="getAssociativeArrayOfArrays" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{name=1, email=user1@paypal.com, txId=10686626}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetAssociativeArrayOfArrays -->
        <test-method status="PASS" signature="testDataProviderGetAssociativeArrayOfArrays(java.util.Map)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetAssociativeArrayOfArrays" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getAssociativeArrayOfArrays" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{name=2, email=user2@paypal.com, txId=10686627}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetAssociativeArrayOfArrays -->
        <test-method status="PASS" signature="testDataProviderGetAssociativeArrayOfLists(java.util.List)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetAssociativeArrayOfLists" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getAssociativeArrayOfLists" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[1, user1@paypal.com, 10686626]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetAssociativeArrayOfLists -->
        <test-method status="PASS" signature="testDataProviderGetAssociativeArrayOfLists(java.util.List)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetAssociativeArrayOfLists" duration-ms="5" started-at="2016-04-29T14:35:18Z" data-provider="getAssociativeArrayOfLists" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[2, user2@paypal.com, 10686627]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetAssociativeArrayOfLists -->
        <test-method status="PASS" signature="testDataProviderGetAssociativeArrayOfUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetAssociativeArrayOfUsers" duration-ms="5" started-at="2016-04-29T14:35:18Z" data-provider="getAssociativeArrayOfUsers" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Nemo', password='password', accountNumber=78901, amount=120.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-408-666-5508', preintTest=10, isbooleanGood=false, doubleTest=1340.24, longTest=599880, floatTest=0.002, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetAssociativeArrayOfUsers -->
        <test-method status="PASS" signature="testDataProviderGetAssociativeArrayOfUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetAssociativeArrayOfUsers" duration-ms="6" started-at="2016-04-29T14:35:18Z" data-provider="getAssociativeArrayOfUsers" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Rambo', password='abc123', accountNumber=123456, amount=100.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='408'}, AreaCode{areaCode='650'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-408-225-8040', preintTest=12, isbooleanGood=true, doubleTest=12.5, longTest=167045, floatTest=12.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetAssociativeArrayOfUsers -->
        <test-method status="PASS" signature="testDataProviderGetAssociativeArrayOfUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetAssociativeArrayOfUsers" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getAssociativeArrayOfUsers" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Shifu', password='abc124', accountNumber=124567, amount=200.5, areaCode=[AreaCode{areaCode='317'}, AreaCode{areaCode='301'}, AreaCode{areaCode='701'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-714-666-0043', preintTest=14, isbooleanGood=true, doubleTest=13.5, longTest=1234, floatTest=13.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetAssociativeArrayOfUsers -->
        <test-method status="PASS" signature="testDataProviderGetAssociativeArrayOfUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetAssociativeArrayOfUsers" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getAssociativeArrayOfUsers" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetAssociativeArrayOfUsers -->
        <test-method status="PASS" signature="testDataProviderGetAssociativeArrayOfUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetAssociativeArrayOfUsers" duration-ms="5" started-at="2016-04-29T14:35:18Z" data-provider="getAssociativeArrayOfUsers" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='null', password='null', accountNumber=385749204, amount=null, areaCode=null, bank=null, phoneNumber='null', preintTest=0, isbooleanGood=false, doubleTest=0.0, longTest=0, floatTest=0.0, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetAssociativeArrayOfUsers -->
        <test-method status="PASS" signature="testDataProviderGetDataByIndex(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDataByIndex" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDataByIndex" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Nemo', password='password', accountNumber=78901, amount=120.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-408-666-5508', preintTest=10, isbooleanGood=false, doubleTest=1340.24, longTest=599880, floatTest=0.002, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDataByIndex -->
        <test-method status="PASS" signature="testDataProviderGetDataByIndex(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDataByIndex" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getDataByIndex" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Rambo', password='abc123', accountNumber=123456, amount=100.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='408'}, AreaCode{areaCode='650'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-408-225-8040', preintTest=12, isbooleanGood=true, doubleTest=12.5, longTest=167045, floatTest=12.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDataByIndex -->
        <test-method status="PASS" signature="testDataProviderGetDataByIndex(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDataByIndex" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getDataByIndex" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Shifu', password='abc124', accountNumber=124567, amount=200.5, areaCode=[AreaCode{areaCode='317'}, AreaCode{areaCode='301'}, AreaCode{areaCode='701'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-714-666-0043', preintTest=14, isbooleanGood=true, doubleTest=13.5, longTest=1234, floatTest=13.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDataByIndex -->
        <test-method status="PASS" signature="testDataProviderGetDataByIndex(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDataByIndex" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDataByIndex" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDataByIndex -->
        <test-method status="PASS" signature="testDataProviderGetDataByIndex(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDataByIndex" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getDataByIndex" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='null', password='null', accountNumber=385749204, amount=null, areaCode=null, bank=null, phoneNumber='null', preintTest=0, isbooleanGood=false, doubleTest=0.0, longTest=0, floatTest=0.0, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDataByIndex -->
        <test-method status="PASS" signature="testDataProviderGetDataByIndex(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDataByIndex" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDataByIndex" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDataByIndex -->
        <test-method status="PASS" signature="testDataProviderGetDataByKeys(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDataByKeys" duration-ms="5" started-at="2016-04-29T14:35:18Z" data-provider="getDataByKeys" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Nemo', password='password', accountNumber=78901, amount=120.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-408-666-5508', preintTest=10, isbooleanGood=false, doubleTest=1340.24, longTest=599880, floatTest=0.002, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDataByKeys -->
        <test-method status="PASS" signature="testDataProviderGetDataByKeys(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDataByKeys" duration-ms="5" started-at="2016-04-29T14:35:18Z" data-provider="getDataByKeys" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Rambo', password='abc123', accountNumber=123456, amount=100.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='408'}, AreaCode{areaCode='650'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-408-225-8040', preintTest=12, isbooleanGood=true, doubleTest=12.5, longTest=167045, floatTest=12.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDataByKeys -->
        <test-method status="PASS" signature="testDataProviderGetDataByKeys(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDataByKeys" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDataByKeys" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Shifu', password='abc124', accountNumber=124567, amount=200.5, areaCode=[AreaCode{areaCode='317'}, AreaCode{areaCode='301'}, AreaCode{areaCode='701'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-714-666-0043', preintTest=14, isbooleanGood=true, doubleTest=13.5, longTest=1234, floatTest=13.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDataByKeys -->
        <test-method status="PASS" signature="testDataProviderGetDataByKeys(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDataByKeys" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getDataByKeys" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDataByKeys -->
        <test-method status="PASS" signature="testDataProviderGetDocumentSeparatedLists(java.util.ArrayList)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDocumentSeparatedLists" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDocumentSeparatedLists" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[string1, string2, string3]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDocumentSeparatedLists -->
        <test-method status="PASS" signature="testDataProviderGetDocumentSeparatedLists(java.util.ArrayList)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDocumentSeparatedLists" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDocumentSeparatedLists" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[string1, string2, string3]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDocumentSeparatedLists -->
        <test-method status="PASS" signature="testDataProviderGetDocumentSeparatedLists(java.util.LinkedHashMap)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDocumentSeparatedLists" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDocumentSeparatedAssociativeArrays" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{item1=string1, item2=string2, item3=string3}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDocumentSeparatedLists -->
        <test-method status="PASS" signature="testDataProviderGetDocumentSeparatedLists(java.util.LinkedHashMap)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDocumentSeparatedLists" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDocumentSeparatedAssociativeArrays" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{item1=string1, item2=string2, item3=string3}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDocumentSeparatedLists -->
        <test-method status="PASS" signature="testDataProviderGetDocumentSeparatedUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDocumentSeparatedUsers" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDocumentSeparatedUsers" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Nemo', password='password', accountNumber=78901, amount=120.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-408-666-5508', preintTest=10, isbooleanGood=false, doubleTest=1340.24, longTest=599880, floatTest=0.002, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDocumentSeparatedUsers -->
        <test-method status="PASS" signature="testDataProviderGetDocumentSeparatedUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDocumentSeparatedUsers" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDocumentSeparatedUsers" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Rambo', password='abc123', accountNumber=123456, amount=100.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='408'}, AreaCode{areaCode='650'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-408-225-8040', preintTest=12, isbooleanGood=true, doubleTest=12.5, longTest=167045, floatTest=12.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDocumentSeparatedUsers -->
        <test-method status="PASS" signature="testDataProviderGetDocumentSeparatedUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDocumentSeparatedUsers" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getDocumentSeparatedUsers" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Shifu', password='abc124', accountNumber=124567, amount=200.5, areaCode=[AreaCode{areaCode='317'}, AreaCode{areaCode='301'}, AreaCode{areaCode='701'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-714-666-0043', preintTest=14, isbooleanGood=true, doubleTest=13.5, longTest=1234, floatTest=13.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDocumentSeparatedUsers -->
        <test-method status="PASS" signature="testDataProviderGetDocumentSeparatedUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDocumentSeparatedUsers" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDocumentSeparatedUsers" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDocumentSeparatedUsers -->
        <test-method status="PASS" signature="testDataProviderGetDocumentSeparatedUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDocumentSeparatedUsers" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getDocumentSeparatedUsers" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='null', password='null', accountNumber=385749204, amount=null, areaCode=null, bank=null, phoneNumber='null', preintTest=0, isbooleanGood=false, doubleTest=0.0, longTest=0, floatTest=0.0, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDocumentSeparatedUsers -->
        <test-method status="PASS" signature="testDataProviderGetDocumentSeparatedUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetDocumentSeparatedUsers" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getDocumentSeparatedUsers" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetDocumentSeparatedUsers -->
        <test-method status="PASS" signature="testDataProviderGetList(java.lang.String)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetList" duration-ms="2" started-at="2016-04-29T14:35:18Z" data-provider="getList" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[string1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetList -->
        <test-method status="PASS" signature="testDataProviderGetList(java.lang.String)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetList" duration-ms="2" started-at="2016-04-29T14:35:18Z" data-provider="getList" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[string2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetList -->
        <test-method status="PASS" signature="testDataProviderGetList(java.lang.String)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetList" duration-ms="2" started-at="2016-04-29T14:35:18Z" data-provider="getList" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[string3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetList -->
        <test-method status="PASS" signature="testDataProviderGetListOfAssociativeArrays(java.util.Map)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfAssociativeArrays" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getListOfAssociativeArrays" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{name=1, email=user1@paypal.com, txId=10686626}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfAssociativeArrays -->
        <test-method status="PASS" signature="testDataProviderGetListOfAssociativeArrays(java.util.Map)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfAssociativeArrays" duration-ms="2" started-at="2016-04-29T14:35:18Z" data-provider="getListOfAssociativeArrays" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{name=2, email=user2@paypal.com, txId=10686627}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfAssociativeArrays -->
        <test-method status="PASS" signature="testDataProviderGetListOfAssociativeArrays(java.util.Map)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfAssociativeArrays" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getListOfAssociativeArrays" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{name=1, email=user1@paypal.com, txId=10686626}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfAssociativeArrays -->
        <test-method status="PASS" signature="testDataProviderGetListOfAssociativeArrays(java.util.Map)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfAssociativeArrays" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getListOfAssociativeArrays" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{name=2, email=user2@paypal.com, txId=10686627}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfAssociativeArrays -->
        <test-method status="PASS" signature="testDataProviderGetListOfAssociativeArrays(java.util.Map)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfAssociativeArrays" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getListOfAssociativeArrays" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{name=1, email=user1@paypal.com, txId=10686626}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfAssociativeArrays -->
        <test-method status="PASS" signature="testDataProviderGetListOfAssociativeArrays(java.util.Map)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfAssociativeArrays" duration-ms="3" started-at="2016-04-29T14:35:18Z" data-provider="getListOfAssociativeArrays" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{name=2, email=user2@paypal.com, txId=10686627}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfAssociativeArrays -->
        <test-method status="PASS" signature="testDataProviderGetListOfLists(java.util.ArrayList)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfLists" duration-ms="2" started-at="2016-04-29T14:35:18Z" data-provider="getListOfLists" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[1, user1@paypal.com, 10686626]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfLists -->
        <test-method status="PASS" signature="testDataProviderGetListOfLists(java.util.ArrayList)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfLists" duration-ms="4" started-at="2016-04-29T14:35:18Z" data-provider="getListOfLists" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[2, user2@paypal.com, 10686627]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfLists -->
        <test-method status="PASS" signature="testDataProviderGetListOfUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfUsers" duration-ms="3" started-at="2016-04-29T14:35:19Z" data-provider="getListOfUsers" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Nemo', password='password', accountNumber=78901, amount=120.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-408-666-5508', preintTest=10, isbooleanGood=false, doubleTest=1340.24, longTest=599880, floatTest=0.002, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfUsers -->
        <test-method status="PASS" signature="testDataProviderGetListOfUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfUsers" duration-ms="3" started-at="2016-04-29T14:35:19Z" data-provider="getListOfUsers" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Rambo', password='abc123', accountNumber=123456, amount=100.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='408'}, AreaCode{areaCode='650'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-408-225-8040', preintTest=12, isbooleanGood=true, doubleTest=12.5, longTest=167045, floatTest=12.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfUsers -->
        <test-method status="PASS" signature="testDataProviderGetListOfUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfUsers" duration-ms="3" started-at="2016-04-29T14:35:19Z" data-provider="getListOfUsers" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Shifu', password='abc124', accountNumber=124567, amount=200.5, areaCode=[AreaCode{areaCode='317'}, AreaCode{areaCode='301'}, AreaCode{areaCode='701'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-714-666-0043', preintTest=14, isbooleanGood=true, doubleTest=13.5, longTest=1234, floatTest=13.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfUsers -->
        <test-method status="PASS" signature="testDataProviderGetListOfUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfUsers" duration-ms="3" started-at="2016-04-29T14:35:19Z" data-provider="getListOfUsers" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfUsers -->
        <test-method status="PASS" signature="testDataProviderGetListOfUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfUsers" duration-ms="3" started-at="2016-04-29T14:35:19Z" data-provider="getListOfUsers" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='null', password='null', accountNumber=385749204, amount=null, areaCode=null, bank=null, phoneNumber='null', preintTest=0, isbooleanGood=false, doubleTest=0.0, longTest=0, floatTest=0.0, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfUsers -->
        <test-method status="PASS" signature="testDataProviderGetListOfUsers(com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetListOfUsers" duration-ms="3" started-at="2016-04-29T14:35:19Z" data-provider="getListOfUsers" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetListOfUsers -->
        <test-method status="PASS" signature="testDataProviderGetMultipleArguments(com.mycompany.myselion.sample.dataobjects.UserInformation, com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetMultipleArguments" duration-ms="4" started-at="2016-04-29T14:35:19Z" data-provider="getMultipleArguments" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Nemo', password='password', accountNumber=78901, amount=120.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-408-666-5508', preintTest=10, isbooleanGood=false, doubleTest=1340.24, longTest=599880, floatTest=0.002, byteTest=0}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UserInformation{name='Nemo', password='password', accountNumber=78901, amount=120.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-408-666-5508', preintTest=10, isbooleanGood=false, doubleTest=1340.24, longTest=599880, floatTest=0.002, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetMultipleArguments -->
        <test-method status="PASS" signature="testDataProviderGetMultipleArguments(com.mycompany.myselion.sample.dataobjects.UserInformation, com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetMultipleArguments" duration-ms="3" started-at="2016-04-29T14:35:19Z" data-provider="getMultipleArguments" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Rambo', password='abc123', accountNumber=123456, amount=100.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='408'}, AreaCode{areaCode='650'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-408-225-8040', preintTest=12, isbooleanGood=true, doubleTest=12.5, longTest=167045, floatTest=12.5, byteTest=0}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UserInformation{name='Rambo', password='abc123', accountNumber=123456, amount=100.0, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='408'}, AreaCode{areaCode='650'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-408-225-8040', preintTest=12, isbooleanGood=true, doubleTest=12.5, longTest=167045, floatTest=12.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetMultipleArguments -->
        <test-method status="PASS" signature="testDataProviderGetMultipleArguments(com.mycompany.myselion.sample.dataobjects.UserInformation, com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetMultipleArguments" duration-ms="3" started-at="2016-04-29T14:35:19Z" data-provider="getMultipleArguments" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Shifu', password='abc124', accountNumber=124567, amount=200.5, areaCode=[AreaCode{areaCode='317'}, AreaCode{areaCode='301'}, AreaCode{areaCode='701'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-714-666-0043', preintTest=14, isbooleanGood=true, doubleTest=13.5, longTest=1234, floatTest=13.5, byteTest=0}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UserInformation{name='Shifu', password='abc124', accountNumber=124567, amount=200.5, areaCode=[AreaCode{areaCode='317'}, AreaCode{areaCode='301'}, AreaCode{areaCode='701'}], bank=BankInformation{name='Well fargo', type='savings', address=AddressInformation{street='12 Pico st'}}, phoneNumber='1-714-666-0043', preintTest=14, isbooleanGood=true, doubleTest=13.5, longTest=1234, floatTest=13.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetMultipleArguments -->
        <test-method status="PASS" signature="testDataProviderGetMultipleArguments(com.mycompany.myselion.sample.dataobjects.UserInformation, com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetMultipleArguments" duration-ms="2" started-at="2016-04-29T14:35:19Z" data-provider="getMultipleArguments" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetMultipleArguments -->
        <test-method status="PASS" signature="testDataProviderGetMultipleArguments(com.mycompany.myselion.sample.dataobjects.UserInformation, com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetMultipleArguments" duration-ms="3" started-at="2016-04-29T14:35:19Z" data-provider="getMultipleArguments" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='null', password='null', accountNumber=385749204, amount=null, areaCode=null, bank=null, phoneNumber='null', preintTest=0, isbooleanGood=false, doubleTest=0.0, longTest=0, floatTest=0.0, byteTest=0}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UserInformation{name='null', password='null', accountNumber=385749204, amount=null, areaCode=null, bank=null, phoneNumber='null', preintTest=0, isbooleanGood=false, doubleTest=0.0, longTest=0, floatTest=0.0, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetMultipleArguments -->
        <test-method status="PASS" signature="testDataProviderGetMultipleArguments(com.mycompany.myselion.sample.dataobjects.UserInformation, com.mycompany.myselion.sample.dataobjects.UserInformation)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetMultipleArguments" duration-ms="2" started-at="2016-04-29T14:35:19Z" data-provider="getMultipleArguments" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UserInformation{name='Simba', password='abc124', accountNumber=1234567, amount=300.75, areaCode=[AreaCode{areaCode='501'}, AreaCode{areaCode='301'}, AreaCode{areaCode='408'}], bank=BankInformation{name='BOA', type='checking', address=AddressInformation{street='1234 Elm st'}}, phoneNumber='1-213-580-6070', preintTest=17, isbooleanGood=false, doubleTest=14.5, longTest=456567, floatTest=14.5, byteTest=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetMultipleArguments -->
        <test-method status="PASS" signature="testDataProviderGetStringList(java.lang.String, java.lang.String)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetStringList" duration-ms="2" started-at="2016-04-29T14:35:19Z" data-provider="getMultipleStringArguments" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[string1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[string1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetStringList -->
        <test-method status="PASS" signature="testDataProviderGetStringList(java.lang.String, java.lang.String)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetStringList" duration-ms="4" started-at="2016-04-29T14:35:19Z" data-provider="getMultipleStringArguments" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[string2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[string2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetStringList -->
        <test-method status="PASS" signature="testDataProviderGetStringList(java.lang.String, java.lang.String)[pri:0, instance:com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest@4dd73938]" name="testDataProviderGetStringList" duration-ms="3" started-at="2016-04-29T14:35:19Z" data-provider="getMultipleStringArguments" finished-at="2016-04-29T14:35:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[string3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[string3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataProviderGetStringList -->
      </class> <!-- com.mycompany.myselion.sample.selion.YamlPoweredDataDrivenTest -->
      <class name="com.mycompany.myselion.sample.selion.SimpleDataDrivenTest">
        <test-method status="PASS" signature="testExcelDataValues(com.mycompany.myselion.sample.dataobjects.SimpleData)[pri:0, instance:com.mycompany.myselion.sample.selion.SimpleDataDrivenTest@24a5031d]" name="testExcelDataValues" duration-ms="8" started-at="2016-04-29T14:35:17Z" data-provider="simpleReader" finished-at="2016-04-29T14:35:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[SimpleData{employeeId=1, employeeName='Simon Stewart'}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Running test for SimpleData{employeeId=1, employeeName='Simon Stewart'}]]>
            </line>
          </reporter-output>
        </test-method> <!-- testExcelDataValues -->
        <test-method status="PASS" signature="testExcelDataValues(com.mycompany.myselion.sample.dataobjects.SimpleData)[pri:0, instance:com.mycompany.myselion.sample.selion.SimpleDataDrivenTest@24a5031d]" name="testExcelDataValues" duration-ms="7" started-at="2016-04-29T14:35:17Z" data-provider="simpleReader" finished-at="2016-04-29T14:35:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[SimpleData{employeeId=2, employeeName='Jim Evans'}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Running test for SimpleData{employeeId=2, employeeName='Jim Evans'}]]>
            </line>
          </reporter-output>
        </test-method> <!-- testExcelDataValues -->
        <test-method status="PASS" signature="testExcelDataValues(com.mycompany.myselion.sample.dataobjects.SimpleData)[pri:0, instance:com.mycompany.myselion.sample.selion.SimpleDataDrivenTest@24a5031d]" name="testExcelDataValues" duration-ms="7" started-at="2016-04-29T14:35:17Z" data-provider="simpleReader" finished-at="2016-04-29T14:35:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[SimpleData{employeeId=3, employeeName='Francois Reynaud'}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Running test for SimpleData{employeeId=3, employeeName='Francois Reynaud'}]]>
            </line>
          </reporter-output>
        </test-method> <!-- testExcelDataValues -->
      </class> <!-- com.mycompany.myselion.sample.selion.SimpleDataDrivenTest -->
      <class name="com.mycompany.myselion.sample.selion.SimpleDataDrivenWithSelectiveRowsTest">
        <test-method status="PASS" signature="testExcelDataValues(com.mycompany.myselion.sample.dataobjects.SimpleData)[pri:0, instance:com.mycompany.myselion.sample.selion.SimpleDataDrivenWithSelectiveRowsTest@4d6f77b6]" name="testExcelDataValues" duration-ms="10" started-at="2016-04-29T14:35:17Z" data-provider="simpleReader" finished-at="2016-04-29T14:35:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[SimpleData{employeeId=1, employeeName='Simon Stewart'}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Running test for SimpleData{employeeId=1, employeeName='Simon Stewart'}]]>
            </line>
          </reporter-output>
        </test-method> <!-- testExcelDataValues -->
        <test-method status="PASS" signature="testExcelDataValues(com.mycompany.myselion.sample.dataobjects.SimpleData)[pri:0, instance:com.mycompany.myselion.sample.selion.SimpleDataDrivenWithSelectiveRowsTest@4d6f77b6]" name="testExcelDataValues" duration-ms="16" started-at="2016-04-29T14:35:18Z" data-provider="simpleReader" finished-at="2016-04-29T14:35:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[SimpleData{employeeId=2, employeeName='Jim Evans'}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Running test for SimpleData{employeeId=2, employeeName='Jim Evans'}]]>
            </line>
          </reporter-output>
        </test-method> <!-- testExcelDataValues -->
        <test-method status="PASS" signature="testHowManyRowsWereRead()[pri:0, instance:com.mycompany.myselion.sample.selion.SimpleDataDrivenWithSelectiveRowsTest@4d6f77b6]" name="testHowManyRowsWereRead" duration-ms="13" started-at="2016-04-29T14:35:18Z" depends-on-methods="com.mycompany.myselion.sample.selion.SimpleDataDrivenWithSelectiveRowsTest.testExcelDataValues" finished-at="2016-04-29T14:35:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHowManyRowsWereRead -->
      </class> <!-- com.mycompany.myselion.sample.selion.SimpleDataDrivenWithSelectiveRowsTest -->
      <class name="com.mycompany.myselion.sample.selion.DataDrivenWithCustomTypesTest">
        <test-method status="PASS" signature="testExcelDataValues(com.mycompany.myselion.sample.dataobjects.CustomData)[pri:0, instance:com.mycompany.myselion.sample.selion.DataDrivenWithCustomTypesTest@1585a1cb]" name="testExcelDataValues" duration-ms="101" started-at="2016-04-29T14:35:17Z" data-provider="simpleReader" finished-at="2016-04-29T14:35:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[CustomData{employeeName='Simon Stewart', country=UNITED_STATES}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Running test for CustomData{employeeName='Simon Stewart', country=UNITED_STATES}]]>
            </line>
          </reporter-output>
        </test-method> <!-- testExcelDataValues -->
        <test-method status="PASS" signature="testExcelDataValues(com.mycompany.myselion.sample.dataobjects.CustomData)[pri:0, instance:com.mycompany.myselion.sample.selion.DataDrivenWithCustomTypesTest@1585a1cb]" name="testExcelDataValues" duration-ms="9" started-at="2016-04-29T14:35:17Z" data-provider="simpleReader" finished-at="2016-04-29T14:35:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[CustomData{employeeName='Jim Evans', country=UNITED_STATES}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Running test for CustomData{employeeName='Jim Evans', country=UNITED_STATES}]]>
            </line>
          </reporter-output>
        </test-method> <!-- testExcelDataValues -->
        <test-method status="PASS" signature="testExcelDataValues(com.mycompany.myselion.sample.dataobjects.CustomData)[pri:0, instance:com.mycompany.myselion.sample.selion.DataDrivenWithCustomTypesTest@1585a1cb]" name="testExcelDataValues" duration-ms="9" started-at="2016-04-29T14:35:17Z" data-provider="simpleReader" finished-at="2016-04-29T14:35:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[CustomData{employeeName='Francois Reynaud', country=UNITED_STATES}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Running test for CustomData{employeeName='Francois Reynaud', country=UNITED_STATES}]]>
            </line>
          </reporter-output>
        </test-method> <!-- testExcelDataValues -->
      </class> <!-- com.mycompany.myselion.sample.selion.DataDrivenWithCustomTypesTest -->
      <class name="com.mycompany.myselion.sample.selion.SoftAssertionsTest">
        <test-method status="FAIL" signature="simpleTestMethod()[pri:0, instance:com.mycompany.myselion.sample.selion.SoftAssertionsTest@511c7571]" name="simpleTestMethod" duration-ms="34" started-at="2016-04-29T14:35:18Z" finished-at="2016-04-29T14:35:18Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Multiple (3) soft assertion failures occurred [
	1. AssertionError: Ensuring that falsy values are always falsy expected [false] but found [true]
		at org.testng.Assert.fail(Assert.java:94)
		at org.testng.Assert.failNotEquals(Assert.java:496)
		at org.testng.Assert.assertFalse(Assert.java:63)
		at org.testng.asserts.Assertion$3.doAssert(Assertion.java:130)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
		at org.testng.asserts.Assertion.assertFalse(Assertion.java:127)
		at com.paypal.selion.platform.asserts.SeLionAsserts.verifyFalse(SeLionAsserts.java:224)
		at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:36)
	2. AssertionError: Ensuring that the author of this test was Krishnan expected [Krishnan] but found [null]
		at org.testng.Assert.fail(Assert.java:94)
		at org.testng.Assert.failNotEquals(Assert.java:496)
		at org.testng.Assert.assertEquals(Assert.java:116)
		at org.testng.asserts.Assertion$8.doAssert(Assertion.java:175)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
		at org.testng.asserts.Assertion.assertEquals(Assertion.java:172)
		at com.paypal.selion.platform.asserts.SeLionAsserts.verifyEquals(SeLionAsserts.java:258)
		at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:37)
	3. AssertionError: Ensuring that Null values stay that way expected [null] but found [Rambo]
		at org.testng.Assert.fail(Assert.java:94)
		at org.testng.Assert.failNotSame(Assert.java:492)
		at org.testng.Assert.assertNull(Assert.java:428)
		at org.testng.asserts.Assertion$31.doAssert(Assertion.java:383)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
		at org.testng.asserts.Assertion.assertNull(Assertion.java:380)
		at com.paypal.selion.platform.asserts.SeLionAsserts.verifyNull(SeLionAsserts.java:338)
		at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:38)
	]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Multiple (3) soft assertion failures occurred [
	1. AssertionError: Ensuring that falsy values are always falsy expected [false] but found [true]
		at org.testng.Assert.fail(Assert.java:94)
		at org.testng.Assert.failNotEquals(Assert.java:496)
		at org.testng.Assert.assertFalse(Assert.java:63)
		at org.testng.asserts.Assertion$3.doAssert(Assertion.java:130)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
		at org.testng.asserts.Assertion.assertFalse(Assertion.java:127)
		at com.paypal.selion.platform.asserts.SeLionAsserts.verifyFalse(SeLionAsserts.java:224)
		at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:36)
	2. AssertionError: Ensuring that the author of this test was Krishnan expected [Krishnan] but found [null]
		at org.testng.Assert.fail(Assert.java:94)
		at org.testng.Assert.failNotEquals(Assert.java:496)
		at org.testng.Assert.assertEquals(Assert.java:116)
		at org.testng.asserts.Assertion$8.doAssert(Assertion.java:175)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
		at org.testng.asserts.Assertion.assertEquals(Assertion.java:172)
		at com.paypal.selion.platform.asserts.SeLionAsserts.verifyEquals(SeLionAsserts.java:258)
		at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:37)
	3. AssertionError: Ensuring that Null values stay that way expected [null] but found [Rambo]
		at org.testng.Assert.fail(Assert.java:94)
		at org.testng.Assert.failNotSame(Assert.java:492)
		at org.testng.Assert.assertNull(Assert.java:428)
		at org.testng.asserts.Assertion$31.doAssert(Assertion.java:383)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
		at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
		at org.testng.asserts.Assertion.assertNull(Assertion.java:380)
		at com.paypal.selion.platform.asserts.SeLionAsserts.verifyNull(SeLionAsserts.java:338)
		at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:38)
	]
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.assertAll(SeLionSoftAssert.java:145)
	at com.paypal.selion.internal.platform.asserts.SeLionAssertsListener.afterInvocation(SeLionAssertsListener.java:77)
	at org.testng.internal.invokers.InvokedMethodListenerInvoker$InvokeAfterInvocationWithoutContextStrategy.callMethod(InvokedMethodListenerInvoker.java:100)
	at org.testng.internal.invokers.InvokedMethodListenerInvoker.invokeListener(InvokedMethodListenerInvoker.java:62)
	at org.testng.internal.Invoker.runInvokedMethodListeners(Invoker.java:552)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:73)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:94)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[Soft Assert [Ensuring that falsy values are always falsy] failed in simpleTestMethod()
java.lang.AssertionError: Ensuring that falsy values are always falsy expected [false] but found [true]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertFalse(Assert.java:63)
	at org.testng.asserts.Assertion$3.doAssert(Assertion.java:130)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
	at org.testng.asserts.Assertion.assertFalse(Assertion.java:127)
	at com.paypal.selion.platform.asserts.SeLionAsserts.verifyFalse(SeLionAsserts.java:224)
	at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:36)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:73)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:94)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)
]]>
            </line>
            <line>
              <![CDATA[Soft Assert [Ensuring that the author of this test was Krishnan] failed in simpleTestMethod()
java.lang.AssertionError: Ensuring that the author of this test was Krishnan expected [Krishnan] but found [null]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.asserts.Assertion$8.doAssert(Assertion.java:175)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
	at org.testng.asserts.Assertion.assertEquals(Assertion.java:172)
	at com.paypal.selion.platform.asserts.SeLionAsserts.verifyEquals(SeLionAsserts.java:258)
	at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:73)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:94)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)
]]>
            </line>
            <line>
              <![CDATA[Soft Assert [Ensuring that Null values stay that way] failed in simpleTestMethod()
java.lang.AssertionError: Ensuring that Null values stay that way expected [null] but found [Rambo]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotSame(Assert.java:492)
	at org.testng.Assert.assertNull(Assert.java:428)
	at org.testng.asserts.Assertion$31.doAssert(Assertion.java:383)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.executeAssert(SeLionSoftAssert.java:100)
	at com.paypal.selion.platform.asserts.SeLionSoftAssert.doAssert(SeLionSoftAssert.java:45)
	at org.testng.asserts.Assertion.assertNull(Assertion.java:380)
	at com.paypal.selion.platform.asserts.SeLionAsserts.verifyNull(SeLionAsserts.java:338)
	at com.mycompany.myselion.sample.selion.SoftAssertionsTest.simpleTestMethod(SoftAssertionsTest.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:773)
	at org.testng.TestRunner.run(TestRunner.java:623)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
	at org.testng.TestNG.run(TestNG.java:1018)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:73)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:94)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- simpleTestMethod -->
      </class> <!-- com.mycompany.myselion.sample.selion.SoftAssertionsTest -->
    </test> <!-- DemoNonUITests -->
  </suite> <!-- SeLion Sample Tests -->
</testng-results>
